using JetBrains.Annotations;

namespace BigO.Core.Extensions;

/// <summary>
///     Provides a set of useful extension methods for working with <see cref="IDictionary{TKey,TValue}" /> objects.
/// </summary>
[PublicAPI]
public static class DictionaryExtensions
{
    /// <summary>
    ///     Adds the specified key and value to the <see cref="IDictionary{TKey, TValue}" /> if the key does not already exist.
    /// </summary>
    /// <typeparam name="TKey">The type of the key.</typeparam>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="dictionary">The <see cref="IDictionary{TKey, TValue}" /> to add the key and value to.</param>
    /// <param name="key">The key of the element to add.</param>
    /// <param name="value">The value of the element to add. The value can be <c>null</c> for reference types.</param>
    /// <returns>
    ///     True if the key and value were added to the <see cref="IDictionary{TKey, TValue}" />, false if the key already
    ///     exists.
    /// </returns>
    /// <exception cref="ArgumentNullException">Thrown if the <paramref name="dictionary" /> is <c>null</c>.</exception>
    /// <remarks>
    ///     This method first checks if the <paramref name="key" /> already exists in the <paramref name="dictionary" />. If it
    ///     does, the method returns false and does not modify the dictionary. If the key does not exist, the key and value are
    ///     added to the dictionary and the method returns true.
    /// </remarks>
    public static bool AddIfNotContainsKey<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key,
        TValue value)
    {
        if (dictionary == null)
        {
            throw new ArgumentNullException(nameof(dictionary), $"The {nameof(dictionary)} cannot be null.");
        }


        if (dictionary.ContainsKey(key))
        {
            return false;
        }

        dictionary.Add(key, value);
        return true;
    }

    /// <summary>
    ///     Adds the specified key and value to the <see cref="IDictionary{TKey, TValue}" /> if the key does not already exist.
    ///     The value is generated by a provided value factory.
    /// </summary>
    /// <typeparam name="TKey">The type of the key.</typeparam>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="dictionary">The <see cref="IDictionary{TKey, TValue}" /> to add the key and value to.</param>
    /// <param name="key">The key of the element to add.</param>
    /// <param name="valueFactory">
    ///     The factory that generates the value of the element to add. The value can be <c>null</c> for
    ///     reference types.
    /// </param>
    /// <returns>
    ///     True if the key and value were added to the <see cref="IDictionary{TKey, TValue}" />, false if the key already
    ///     exists.
    /// </returns>
    /// <exception cref="ArgumentNullException">
    ///     Thrown if the <paramref name="dictionary" /> or
    ///     <paramref name="valueFactory" /> is <c>null</c>.
    /// </exception>
    /// <remarks>
    ///     This method first checks if the <paramref name="key" /> already exists in the <paramref name="dictionary" />. If it
    ///     does, the method returns false and does not modify the dictionary. If the key does not exist, the key and a value
    ///     generated by the <paramref name="valueFactory" /> are added to the dictionary and the method returns true.
    /// </remarks>
    public static bool AddIfNotContainsKey<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key,
        Func<TValue> valueFactory)
    {
        if (dictionary == null)
        {
            throw new ArgumentNullException(nameof(dictionary), $"The {nameof(dictionary)} cannot be null.");
        }

        if (valueFactory == null)
        {
            throw new ArgumentNullException(nameof(valueFactory), $"The {nameof(valueFactory)} cannot be null.");
        }

        if (dictionary.ContainsKey(key))
        {
            return false;
        }

        dictionary.Add(key, valueFactory());
        return true;
    }

    /// <summary>
    ///     Adds the specified key and value to the <see cref="IDictionary{TKey, TValue}" /> if the key does not already exist.
    ///     The value is generated by a provided value factory that takes the key as an input.
    /// </summary>
    /// <typeparam name="TKey">The type of the key.</typeparam>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="dictionary">The <see cref="IDictionary{TKey, TValue}" /> to add the key and value to.</param>
    /// <param name="key">The key of the element to add.</param>
    /// <param name="valueFactory">
    ///     The factory that generates the value of the element to add based on the key. The value can
    ///     be <c>null</c> for reference types.
    /// </param>
    /// <returns>
    ///     True if the key and value were added to the <see cref="IDictionary{TKey, TValue}" />, false if the key already
    ///     exists.
    /// </returns>
    /// <exception cref="ArgumentNullException">
    ///     Thrown if the <paramref name="dictionary" /> or
    ///     <paramref name="valueFactory" /> is <c>null</c>.
    /// </exception>
    /// <remarks>
    ///     This method first checks if the <paramref name="key" /> already exists in the <paramref name="dictionary" />. If it
    ///     does, the method returns false and does not modify the dictionary. If the key does not exist, the key and a value
    ///     generated by the <paramref name="valueFactory" /> are added to the dictionary and the method returns true. The
    ///     <paramref name="valueFactory" /> takes the <paramref name="key" /> as input to generate the value.
    /// </remarks>
    public static bool AddIfNotContainsKey<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key,
        Func<TKey, TValue> valueFactory)
    {
        if (dictionary == null)
        {
            throw new ArgumentNullException(nameof(dictionary), $"The {nameof(dictionary)} cannot be null.");
        }

        if (valueFactory == null)
        {
            throw new ArgumentNullException(nameof(valueFactory), $"The {nameof(valueFactory)} cannot be null.");
        }

        if (dictionary.ContainsKey(key))
        {
            return false;
        }

        dictionary.Add(key, valueFactory(key));
        return true;
    }

    /// <summary>
    ///     Removes the element with the specified key from the <see cref="IDictionary{TKey, TValue}" /> if the key exists.
    /// </summary>
    /// <typeparam name="TKey">The type of the key.</typeparam>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="dictionary">The <see cref="IDictionary{TKey, TValue}" /> to remove the element from.</param>
    /// <param name="key">The key of the element to remove.</param>
    /// <exception cref="ArgumentNullException">Thrown if the <paramref name="dictionary" /> is <c>null</c>.</exception>
    /// <remarks>
    ///     This method first checks if the <paramref name="key" /> exists in the <paramref name="dictionary" />. If it does,
    ///     the element with the specified key is removed from the dictionary. If the key does not exist, the dictionary
    ///     remains unchanged.
    /// </remarks>
    public static void RemoveIfContainsKey<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key)
    {
        if (dictionary == null)
        {
            throw new ArgumentNullException(nameof(dictionary), $"The {nameof(dictionary)} cannot be null.");
        }

        if (dictionary.ContainsKey(key))
        {
            dictionary.Remove(key);
        }
    }

    /// <summary>
    ///     Creates a new <see cref="SortedDictionary{TKey, TValue}" /> from the elements of the
    ///     <see cref="IDictionary{TKey, TValue}" />.
    /// </summary>
    /// <typeparam name="TKey">The type of the keys in the dictionary. TKey must be a non-nullable value type.</typeparam>
    /// <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    /// <param name="dictionary">
    ///     The <see cref="IDictionary{TKey, TValue}" /> to create the
    ///     <see cref="SortedDictionary{TKey, TValue}" /> from.
    /// </param>
    /// <returns>
    ///     A new <see cref="SortedDictionary{TKey, TValue}" /> containing the elements of the
    ///     <paramref name="dictionary" />.
    /// </returns>
    /// <exception cref="ArgumentNullException">Thrown if the <paramref name="dictionary" /> is <c>null</c>.</exception>
    /// <remarks>
    ///     This method creates a new <see cref="SortedDictionary{TKey, TValue}" /> from the elements of the
    ///     <paramref name="dictionary" />. The keys in the resulting <see cref="SortedDictionary{TKey, TValue}" /> are sorted
    ///     according to their natural order. If the type of the key does not implement the <see cref="IComparable{T}" />
    ///     interface, a <see cref="ArgumentException" /> is thrown.
    /// </remarks>
    public static SortedDictionary<TKey, TValue> ToSortedDictionary<TKey, TValue>(
        this IDictionary<TKey, TValue> dictionary) where TKey : notnull
    {
        if (dictionary == null)
        {
            throw new ArgumentNullException(nameof(dictionary), $"The {nameof(dictionary)} cannot be null.");
        }

        return new SortedDictionary<TKey, TValue>(dictionary);
    }

    /// <summary>
    ///     Creates a new <see cref="SortedDictionary{TKey, TValue}" /> from the elements of the
    ///     <see cref="IDictionary{TKey, TValue}" /> using the specified <see cref="IComparer{T}" /> to compare keys.
    /// </summary>
    /// <typeparam name="TKey">The type of the keys in the dictionary. TKey must be a non-nullable value type.</typeparam>
    /// <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    /// <param name="dictionary">
    ///     The <see cref="IDictionary{TKey, TValue}" /> to create the
    ///     <see cref="SortedDictionary{TKey, TValue}" /> from.
    /// </param>
    /// <param name="comparer">
    ///     The <see cref="IComparer{T}" /> to use to compare keys. If <c>null</c>, the default comparer
    ///     <see cref="Comparer{T}.Default" /> is used.
    /// </param>
    /// <returns>
    ///     A new <see cref="SortedDictionary{TKey, TValue}" /> containing the elements of the
    ///     <paramref name="dictionary" /> sorted according to the specified <paramref name="comparer" />.
    /// </returns>
    /// <exception cref="ArgumentNullException">Thrown if the <paramref name="dictionary" /> is <c>null</c>.</exception>
    /// <remarks>
    ///     This method creates a new <see cref="SortedDictionary{TKey, TValue}" /> from the elements of the
    ///     <paramref name="dictionary" /> using the specified <paramref name="comparer" /> to compare keys. If the type of the
    ///     key does not implement the <see cref="IComparable{T}" /> interface and no <paramref name="comparer" /> is provided,
    ///     a <see cref="ArgumentException" /> is thrown.
    /// </remarks>
    public static SortedDictionary<TKey, TValue> ToSortedDictionary<TKey, TValue>(
        this IDictionary<TKey, TValue> dictionary, IComparer<TKey> comparer) where TKey : notnull
    {
        if (dictionary == null)
        {
            throw new ArgumentNullException(nameof(dictionary), $"The {nameof(dictionary)} cannot be null.");
        }

        return new SortedDictionary<TKey, TValue>(dictionary, comparer);
    }
}